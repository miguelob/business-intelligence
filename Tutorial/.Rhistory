# 1.	Let us begin with the basics. Create a vector with values 2002, 2004, 2006, 2008 using c and seq functions.
v <- c(2002, 2004, 2006, 2008)
v <- seq(2002,2008,by = 2)
# 2.	Use function length to get the size of the vector.
length(v)
# 3.	Try the different methods for selecting the elements of the vector.
v[2]
v[3:4]
v[-1]
# 4.	Load the data set usedcars.csv into a variable named fdata. It contains actual data about used cars advertised for sale on a popular U.S. website. Source: B. Lantz (2015). Machine Learning with R. Second edition. PACKT
# ----- FIRST SET WORKING DIRECTORY ----
fdata <- read.table(file = "usedcars.csv", #Name of text file.
sep = ",",                       #Separation character.
header = TRUE,                   #If column names are in the first row.
na.strings = "NA",               #Character to be marked as missing value.
stringsAsFactors = FALSE)         #?convert string to factors?
# 5.	Use str and summary functions on fdata. What types of variables are in the dataset? What are the average values of the numeric variables?
str(fdata)
summary(fdata)
# 6.	Use View and head functions on fdata.
View(fdata)
head(fdata)
# 7.	Access the elements number 5 to 20 of variable color.
fdata$color[5:20]
# 8.	Create a new dataset removing row numbers 10 and 100.
fdata2 <- fdata[-c(10,100), 1:2 ]
# 8.	Create a new dataset removing row numbers 10 and 100.
fdata2 <- fdata[-c(10,100), 1:2 ]
# 9.	Create a new dataset only with columns year, price and mileage.
fdata2 <- fdata[,c(1,3,4)] #Option 1
fdata2 <- fdata[,c("year","price","mileage")] #Option 2
# 10.	Obtain statistics for variables year and price.
summary(fdata$year)
summary(fdata$price)
# 11.	Use function by() to calculate statistics filtering by classes.
by(fdata$price, fdata$transmission, mean)
by(fdata$price, fdata$transmission, sd)
by(fdata$price, fdata$color, summary)
# 12.	Filter from this dataset the rows that have a year that matches the values of the vector created in step 1.
index_year <- fdata$year %in% v #option 1
fdata2 <- fdata[index_year,]
fdata2 <- fdata[fdata$year %in% v,] #option 2
#check if filter is correct
table(fdata2$year)
# 13.	Create a new column in the dataset named PM resulting from multiplying the values of price and mileage in each row.
fdata$PM <- fdata$price * fdata$mileage
# 14.	Plot the price values with a solid line.
plot(fdata$price,type = "l")
# 15.	Plot a scatterplot between variables mileage (x axis) and price (y axis).
plot(fdata$mileage,fdata$price)
# 16.	Plot a boxplot of mileage values.
boxplot(fdata$mileage)
#EXTRA: Plot a boxplot of mileage values and prices.
boxplot(fdata[,c("mileage","price")])
#EXTRA: Plot a boxplot of prices dividided by classes in transmission.
boxplot(mileage ~ transmission, data = fdata)
# 17.	Plot a histogram of the prices data. Can you change the number of bins? Can you plot the probability densities for each bar?
hist(fdata$mileage)
hist(fdata$mileage,breaks = 30)
hist(fdata$mileage,breaks = 30,freq = FALSE)
## Load Titanic dataset --------------------------------------------------------
# read.table is a function that allows to read multiple kinds of text files. It admits the following arguments:
Titanic <- read.table(file = "Titanic.csv", #Name of text file.
sep = ",",                       #Separation character.
header = TRUE,                   #If column names are in the first row.
na.strings = "NA",               #Character to be marked as missing value.
stringsAsFactors = FALSE)         #?convert string to factors?
#See structure
str(Titanic)
#Print first few rows
head(Titanic)
# summarize the data read to explore range of values and missing data.
summary(Titanic)
#"Name" is character, but should not be considered as categorical data.
#"PClass" and "Sex" are character variables, but they only contain a small number of classes
unique(Titanic$PClass) #unique function returns a vector with duplicate elements removed
table(Titanic$Sex) #table counts unique elements.
#Therefore, they should be considered as categorical data.
Titanic$PClass <- as.factor(Titanic$PClass)
Titanic$Sex <- as.factor(Titanic$Sex)
str(Titanic) #Labels are created
summary(Titanic) #Summary gives the number of cases
#Contingency table
table(Titanic$PClass, Titanic$Sex)
#"Survived" and "SexCode" are numerical variables, but they only contain a small number of classes
table(Titanic$Survived)
table(Titanic$SexCode)
#Therefore, they should be considered as categorical data.
Titanic$Survived <- as.factor(Titanic$Survived)
str(Titanic)
#some functions do not admit names of factors starting with numbers. We can change the factor names:
levels(Titanic$Survived) <- c("NO","YES")
str(Titanic)
#Another useful function when having a variable with 0 and 1 is ifelse()
Titanic$SexCode <- as.factor(ifelse(Titanic$SexCode, "F","M")) #caret does not handle class level names as numbers
str(Titanic)
## MISSING VALUES --------------------------------------------------------
## Identify missing values and eliminate those observations from the dataset.
# The summary function provides the number of missing values (if any) found for each variable.
summary(Titanic)
# Define a new dataset only with correctly observed data
Titanic_noNA <- Titanic[!is.na(Titanic$Age),]
# In addition, the function na.omit() directly obtains the dataset without NA in all variables.
Titanic_noNA <- na.omit(Titanic)
summary(Titanic_noNA)
#We can create an index variable that has 1s when the sex is female
#The %in% command is equivalent to using the function match()
index_Sex <- Titanic$Sex %in% "female"
#Create the two datasets
Titanic_F <- Titanic[index_Sex,]
Titanic_M <- Titanic[!index_Sex,]
#Join the two datasets only with age, sex and survived. We can use the rbind function
Titanic_new <- rbind(Titanic_F[,c("Age","Sex","Survived")],Titanic_M[,c("Age","Sex","Survived")])
#Load library
library(ggplot2)
install.packages("ggplot2")
# This example will use the mpg dataset in ggplot2 package
data(mpg)
#Descritption of mpg
?mpg
summary(mpg)
# This example will use the mpg dataset in ggplot2 package
data(mpg)
#Descritption of mpg
?mpg
summary(mpg)
head(mpg)
#Example plot using mpg dataset.
#The car's fuel efficiency on the highway (hwy variable) is plotted as a function of the car's engine displacement (displ variable).
ggplot(mpg) + geom_point(mapping = aes(x = displ, y = hwy))
## Basic plotting -------------------------------------------------------------
#The function ggplot() creates a coordinate system that you can add layers to.
ggplot() #Evaluate and observe that it only creates an empty figure.
#You need to initialize a ggplot figure and tell what dataset to use.
ggplot(mpg)
#Add graphics layers, called geoms. The visual properties (aesthetics) of the geoms have to be specified.
#When variables in the dataset are mapped to visual properties, the aes() function is used.
#The following line adds a scatterplot graphics where each point has x coordintates given by variable displ and y coordintaes given by vairable hwy.
ggplot(mpg) + geom_point( aes(x = displ, y = hwy))
#Load library
library(ggplot2)
# This example will use the mpg dataset in ggplot2 package
data(mpg)
#Descritption of mpg
?mpg
summary(mpg)
head(mpg)
#Example plot using mpg dataset.
#The car's fuel efficiency on the highway (hwy variable) is plotted as a function of the car's engine displacement (displ variable).
ggplot(mpg) + geom_point(mapping = aes(x = displ, y = hwy))
## Basic plotting -------------------------------------------------------------
#The function ggplot() creates a coordinate system that you can add layers to.
ggplot() #Evaluate and observe that it only creates an empty figure.
